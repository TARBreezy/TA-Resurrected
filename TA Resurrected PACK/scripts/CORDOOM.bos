#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flarea, flareb, flarec1, flarec2, turreta, hatch, shell1a,
       shell4b, shell3b, shell2b, shell1b, shell2a, shell3a, shell4a, turretb,
       turretc, hatchc, sleevec, hatchb, barrelc1, barrelc2, collarb, barrelb,
       barrela, sleevea, sleeveb;

static-var  gun_3, restore_delay, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


activatescr()
{
	if( TRUE )
	{
		set ARMORED to 0;
		turn hatch to z-axis <0.000000> now;
		turn hatch to z-axis <-31.593407> speed <94>;
		sleep 336;
	}
	if( TRUE )
	{
		move hatch to x-axis [3.200000] speed [10];			//4.754828
		move hatch to y-axis [-3.650000] speed [10];			//5.423480
		turn hatch to z-axis <-49.247253> speed <52>;		//26.230769
		sleep 337;			//673
	}
	if( TRUE )
	{
		move shell1a to z-axis [0.000000] speed [0.000000];
		move shell4b to x-axis [-4.150000] speed [12];			//6.166418
		move shell3b to z-axis [-4.050000] speed [12];			//6.017828
		move shell2b to x-axis [4.000000] speed [12];			//5.943530
		move shell1b to z-axis [3.949994] speed [12];			//5.869238
		sleep 337;			//673
	}
	if( TRUE )
	{
		move shell1a to x-axis [3.300000] speed [10];			//4.977374
		move shell1a to z-axis [0.000000] speed [0.000000];
		move shell2a to z-axis [-3.300000] speed [10];			//4.977374
		move shell3a to x-axis [-3.300000] speed [10];			//4.977374
		move shell4a to z-axis [3.300000] speed [10];			//4.977374
		sleep 332;			//663
	}
	if( TRUE )
	{
		move shell1a to y-axis [-11.450000] speed [34];			//17.013373
		move shell2a to y-axis [-11.450000] speed [34];			//17.013373
		move shell3a to y-axis [-11.400000] speed [34];			//16.939075
		move shell4a to y-axis [-11.400000] speed [34];			//16.939081
		sleep 337;			//673
	}
	if( TRUE )
	{
		sleep 112;			//223
	}
	if( TRUE )
	{
		move turreta to y-axis [4.300006] speed [14];			//6.793060
		sleep 317;			//633
	}
	if( TRUE )
	{
		move turreta to y-axis [8.850000] speed [14];			//6.760760
		move turretb to y-axis [4.450006] speed [14];			//6.612201
		sleep 337;			//673
	}
	if( TRUE )
	{
		move turreta to y-axis [11.549994] speed [8];			//4.011877
		move turretb to y-axis [7.100000] speed [8];			//3.937573
		move turretc to y-axis [2.650000] speed [8];			//3.937598
		sleep 337;			//673
	}
	if( TRUE )
	{
		move hatchc to y-axis [1.700000] speed [5];			//2.526001
		move hatchc to z-axis [-0.699994] speed [2];			//1.040112
		sleep 337;			//673
	}
	if( TRUE )
	{
		move sleevec to z-axis [4.100000] speed [12];			//6.002924
		move hatchb to x-axis [2.950000] speed [8];			//4.319183
		move hatchb to z-axis [-3.350000] speed [10];			//4.904834
		turn hatchb to y-axis <-46.923077> speed <138>;			//68.703297
		sleep 342;			//683
	}
	if( TRUE )
	{
		move barrelc1 to z-axis [3.150000] speed [10];			//4.612006
		move barrelc2 to z-axis [3.149994] speed [10];			//4.612000
		move collarb to z-axis [3.400000] speed [10];			//4.978040
		sleep 342;			//683
	}
	if( TRUE )
	{
		move barrelb to z-axis [3.500000] speed [10];			//5.124451
		sleep 342;			//683
	}
	if( TRUE )
	{
		move barrela to z-axis [3.649994] speed [10];			//5.344067
		sleep 342;			//683
	}
	sleep 43;
}

deactivatescr()
{
	if( TRUE )
	{
		move turreta to y-axis [11.549994] now;
		move turretb to y-axis [7.100000] now;
		move turretc to y-axis [2.650000] now;
		move shell1a to x-axis [3.300000] now;
		move shell1a to y-axis [-11.450000] now;
		move shell1a to z-axis [0.000000] now;
		move shell2a to y-axis [-11.450000] now;
		move shell2a to z-axis [-3.300000] now;
		move shell3a to x-axis [-3.300000] now;
		move shell3a to y-axis [-11.400000] now;
		move shell4a to y-axis [-11.400000] now;
		move shell4a to z-axis [3.300000] now;
		move shell4b to x-axis [-4.150000] now;
		move shell3b to z-axis [-4.050000] now;
		move shell2b to x-axis [4.000000] now;
		move shell1b to z-axis [3.949994] now;
		move hatch to x-axis [3.200000] now;
		move hatch to y-axis [-3.650000] now;
		move hatchc to y-axis [1.700000] now;
		move hatchc to z-axis [-0.699994] now;
		move sleevec to z-axis [4.100000] now;
		move barrelc1 to z-axis [3.150000] now;
		move barrelc2 to z-axis [3.149994] now;
		move collarb to z-axis [3.400000] now;
		move hatchb to x-axis [2.950000] now;
		move hatchb to z-axis [-3.350000] now;
		move barrelb to z-axis [3.500000] now;
		move barrela to z-axis [3.649994] now;
		move barrela to z-axis [0.000000] speed [10];
		turn hatch to z-axis <-49.247253> now;
		turn hatchb to y-axis <-46.923077> now;
		sleep 336;
	}
	if( TRUE )
	{
		move barrelb to z-axis [0.000000] speed [10];
		sleep 339;
	}
	if( TRUE )
	{
		move barrelc1 to z-axis [0.000000] speed [10];
		move barrelc2 to z-axis [0.000000] speed [10];
		move collarb to z-axis [0.000000] speed [10];
		sleep 341;
	}
	if( TRUE )
	{
		move sleevec to z-axis [0.000000] speed [12];
		move hatchb to x-axis [0.000000] speed [8];
		move hatchb to z-axis [0.000000] speed [10];
		turn hatchb to y-axis <0.000000> speed <138>;
		sleep 341;
	}
	if( TRUE )
	{
		move hatchc to y-axis [0.000000] speed [6];
		move hatchc to z-axis [0.000000] speed [2];
		sleep 342;
	}
	if( TRUE )
	{
		move turreta to y-axis [8.850000] speed [8];
		move turretb to y-axis [4.450006] speed [8];
		move turretc to y-axis [0.000000] speed [8];
		sleep 328;
	}
	if( TRUE )
	{
		move turreta to y-axis [4.300006] speed [14];
		move turretb to y-axis [0.000000] speed [14];
		sleep 330;
	}
	if( TRUE )
	{
		move turreta to y-axis [0.000000] speed [14];
		sleep 331;
	}
	if( TRUE )
	{
		sleep 148;
	}
	if( TRUE )
	{
		move shell1a to y-axis [0.000000] speed [34];
		move shell2a to y-axis [0.000000] speed [34];
		move shell3a to y-axis [0.000000] speed [34];
		move shell4a to y-axis [0.000000] speed [34];
		sleep 328;
	}
	if( TRUE )
	{
		move shell1a to x-axis [0.000000] speed [10];
		move shell1a to z-axis [0.000000] speed [0.000000];
		move shell2a to z-axis [0.000000] speed [10];
		move shell3a to x-axis [0.000000] speed [10];
		move shell4a to z-axis [0.000000] speed [10];
		sleep 325;
	}
	if( TRUE )
	{
		move shell1a to z-axis [0.000000] speed [0.000000];
		move shell4b to x-axis [0.000000] speed [12];
		move shell3b to z-axis [0.000000] speed [12];
		move shell2b to x-axis [0.000000] speed [12];
		move shell1b to z-axis [0.000000] speed [12];
		sleep 331;
	}
	if( TRUE )
	{
		move hatch to x-axis [0.000000] speed [10];
		move hatch to y-axis [0.000000] speed [12];
		turn hatch to z-axis <-31.593407> speed <54>;
		sleep 330;
	}
	if( TRUE )
	{
		turn hatch to z-axis <0.000000> speed <96>;
		sleep 329;
	}
	sleep 54;
	set ARMORED to 1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache barrela;
	dont-cache barrelb;
	dont-cache barrelc1;
	dont-cache barrelc2;
	dont-cache collarb;
	dont-cache flarea;
	dont-cache flareb;
	dont-cache flarec1;
	dont-cache flarec2;
	dont-cache hatch;
	dont-cache hatchb;
	dont-cache hatchc;
	dont-cache shell1a;
	dont-cache shell1b;
	dont-cache shell2a;
	dont-cache shell2b;
	dont-cache shell3a;
	dont-cache shell3b;
	dont-cache shell4a;
	dont-cache shell4b;
	dont-cache sleevea;
	dont-cache sleeveb;
	dont-cache sleevec;
	dont-cache turreta;
	dont-cache turretb;
	dont-cache turretc;
	call-script activatescr();
	set ACTIVATION to 1;
	Static_Var_3 = 1;
}

Stop()
{
	Static_Var_3 = 0;
	set ACTIVATION to 0;
	call-script deactivatescr();
	cache barrela;
	cache barrelb;
	cache barrelc1;
	cache barrelc2;
	cache collarb;
	cache flarea;
	cache flareb;
	cache flarec1;
	cache flarec2;
	cache hatch;
	cache hatchb;
	cache hatchc;
	cache shell1a;
	cache shell1b;
	cache shell2a;
	cache shell2b;
	cache shell3a;
	cache shell3b;
	cache shell4a;
	cache shell4b;
	cache sleevea;
	cache sleeveb;
	cache sleevec;
	cache turreta;
	cache turretb;
	cache turretc;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	set ARMORED to 1;
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	dont-shade barrela;
	dont-shade barrelb;
	dont-shade barrelc1;
	dont-shade barrelc2;
	dont-shade collarb;
	dont-shade flarea;
	dont-shade flareb;
	dont-shade flarec1;
	dont-shade flarec2;
	dont-shade hatch;
	dont-shade hatchb;
	dont-shade hatchc;
	dont-shade shell1a;
	dont-shade shell1b;
	dont-shade shell2a;
	dont-shade shell2b;
	dont-shade shell3a;
	dont-shade shell3b;
	dont-shade shell4a;
	dont-shade shell4b;
	dont-shade sleevea;
	dont-shade sleeveb;
	dont-shade sleevec;
	dont-shade turreta;
	dont-shade turretb;
	dont-shade turretc;
	gun_3 = flarea;
	call-script InitState();
	Static_Var_3 = 0;
	restore_delay = 8000;		//2000
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turreta to y-axis <0.000000> speed <50.000000>;
	turn sleevea to x-axis <0.000000> speed <50.000000>;
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	turn turretb to y-axis <0.000000> speed <300.071429>;
	turn sleeveb to x-axis <0.000000> speed <300.071429>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	turn turretc to y-axis <0.000000> speed <200.043956>;
	turn sleevec to x-axis <0.000000> speed <200.043956>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turreta to y-axis heading speed <50.000000>;					//10
	turn sleevea to x-axis <0.000000> - pitch speed <50.000000>;		//10
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretb to y-axis heading speed <300.071429>;
	turn sleeveb to x-axis <0.000000> - pitch speed <300.071429>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretc to y-axis heading speed <200.043956>;
	turn sleevec to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

TargetCleared(Func_Var_1)
{
	stop-spin turreta around y-axis;
	stop-spin sleevea around x-axis;
	stop-spin turretb around y-axis;
	stop-spin sleeveb around x-axis;
	stop-spin turretc around y-axis;
	stop-spin sleevec around x-axis;
}

FirePrimary()
{
	move barrela to z-axis [1.000000] speed [500.000000];
	wait-for-move barrela along z-axis;
	move barrela to z-axis [3.650000] speed [200.000000];
	show flarea;
	sleep 150;
	hide flarea;
}

FireSecondary()
{
	show flareb;
	sleep 150;
	hide flareb;
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
		show flarec1;
		sleep 150;
		hide flarec1;
		gun_3 = flareb;
		return (0);
	}
	if( gun_3 == 2 )
	{
		show flarec2;
		sleep 150;
		hide flarec2;
		gun_3 = flarea;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turreta;
}

AimFromSecondary(piecenum)
{
	piecenum = turretb;
}

AimFromTertiary(piecenum)
{
	piecenum = turretc;
}

QueryPrimary(piecenum)
{
	piecenum = flarea;
}

QuerySecondary(piecenum)
{
	piecenum = flareb;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = flarec1;
	}
	if( gun_3 == 2 )
	{
		piecenum = flarec2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela type BITMAPONLY | BITMAP1;
		explode barrelb type BITMAPONLY | BITMAP2;
		explode barrelc1 type BITMAPONLY | BITMAP3;
		explode barrelc2 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type BITMAPONLY | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode flarec1 type BITMAPONLY | BITMAP4;
		explode flarec2 type BITMAPONLY | BITMAP5;
		explode hatch type BITMAPONLY | BITMAP1;
		explode hatchb type BITMAPONLY | BITMAP2;
		explode hatchc type BITMAPONLY | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type BITMAPONLY | BITMAP2;
		explode sleeveb type BITMAPONLY | BITMAP3;
		explode sleevec type BITMAPONLY | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela type FALL | BITMAP1;
		explode barrelb type FALL | BITMAP2;
		explode barrelc1 type FALL | BITMAP3;
		explode barrelc2 type FALL | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | BITMAP1;
		explode flarea type FALL | BITMAP2;
		explode flareb type FALL | BITMAP3;
		explode flarec1 type FALL | BITMAP4;
		explode flarec2 type FALL | BITMAP5;
		explode hatch type FALL | BITMAP1;
		explode hatchb type FALL | BITMAP2;
		explode hatchc type FALL | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | BITMAP2;
		explode sleeveb type FALL | BITMAP3;
		explode sleevec type FALL | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode shell1a type BITMAPONLY | BITMAP4;
	explode shell1b type BITMAPONLY | BITMAP5;
	explode shell2a type BITMAPONLY | BITMAP1;
	explode shell2b type BITMAPONLY | BITMAP2;
	explode shell3a type BITMAPONLY | BITMAP3;
	explode shell3b type BITMAPONLY | BITMAP4;
	explode shell4a type BITMAPONLY | BITMAP5;
	explode shell4b type BITMAPONLY | BITMAP1;
	explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turreta type BITMAPONLY | BITMAP5;
	explode turretb type BITMAPONLY | BITMAP1;
	explode turretc type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}

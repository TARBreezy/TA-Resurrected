#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Flare1, Flare2, Flare3, Flare4, Flare5, Flare6, Flare7, Flare8,
       Flare9, Flare10, Flare11, Flare12, missile,
       base, Body, FLT, FRT, RLT, RRT, FLSL, FLSM,
       FLSR, FRSL, FRSM, FRSR, RLSL, RLSM, RLSR, RRSL,
       RRSM, RRSR, FLLB, FLMB, FLRB, FRLB, FRMB, FRRB,
       RLLB, RLMB, RLRB, RRLB, RRMB, RRRB, Silo ;

static-var  restore_delay, restore_delay2, restore_delay3, gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ARMORED to 1;
	hide Flare1;
	hide Flare2;
	hide Flare3;
	hide Flare4;
	hide Flare5;
	hide Flare6;
	hide Flare7;
	hide Flare8;
	hide Flare9;
	hide Flare10;
	hide Flare11;
	hide Flare12;
	gun_1 = 0;
	gun_2 = 6;
	gun_3 = missile;
	restore_delay = 5000;
	restore_delay2 = 5000;
	restore_delay3 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn FLT to y-axis <0.000000> speed <25.005495>;
	turn FRT to y-axis <0.000000> speed <25.005495>;
	turn FLSM to x-axis <0.000000> speed <15.000000>;
	turn FLSL to x-axis <0.000000> speed <15.000000>;
	turn FLSR to x-axis <0.000000> speed <15.000000>;
	turn FRSM to x-axis <0.000000> speed <15.000000>;
	turn FRSR to x-axis <0.000000> speed <15.000000>;
	turn FRSL to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay2;
	turn RLT to y-axis <0.000000> speed <25.005495>;
	turn RRT to y-axis <0.000000> speed <25.005495>;
	turn RLSL to x-axis <0.000000> speed <15.000000>;
	turn RLSM to x-axis <0.000000> speed <15.000000>;
	turn RLSR to x-axis <0.000000> speed <15.000000>;
	turn RRSL to x-axis <0.000000> speed <15.000000>;
	turn RRSM to x-axis <0.000000> speed <15.000000>;
	turn RRSR to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay3()
{
	sleep restore_delay3;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn FLT to y-axis heading speed <55.000000>;
	turn FRT to y-axis heading speed <55.000000>;
	turn FLSM to x-axis <0.000000> - pitch speed <50.000000>;
	turn FLSL to x-axis <0.000000> - pitch speed <50.000000>;
	turn FLSR to x-axis <0.000000> - pitch speed <50.000000>;
	turn FRSM to x-axis <0.000000> - pitch speed <50.000000>;
	turn FRSR to x-axis <0.000000> - pitch speed <50.000000>;
	turn FRSL to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn FLT around y-axis;
	wait-for-turn FRT around y-axis;
	wait-for-turn FLSM around x-axis;
	wait-for-turn FLSL around x-axis;
	wait-for-turn FLSR around x-axis;
	wait-for-turn FRSM around x-axis;
	wait-for-turn FRSR around x-axis;	
	wait-for-turn FRSL around x-axis;	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move FLMB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FLMB along z-axis;
		move FLMB to z-axis [0.000000] speed [3.000000];
		show Flare1;
		sleep 150;
		hide Flare1;
	}
	if( gun_1 == 1 )
	{
		move FLLB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FLLB along z-axis;
		move FLLB to z-axis [0.000000] speed [3.000000];
		show Flare2;
		sleep 150;
		hide Flare2;
	}
	if( gun_1 == 2 )
	{
		move FLRB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FLRB along z-axis;
		move FLRB to z-axis [0.000000] speed [3.000000];
		show Flare3;
		sleep 150;
		hide Flare3;
	}
	if( gun_1 == 3 )
	{
		move FRMB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FRMB along z-axis;
		move FRMB to z-axis [0.000000] speed [3.000000];
		show Flare4;
		sleep 150;
		hide Flare4;
	}
	if( gun_1 == 4 )
	{
		move FRLB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FRLB along z-axis;
		move FRLB to z-axis [0.000000] speed [3.000000];
		show Flare5;
		sleep 150;
		hide Flare5;
	}
	if( gun_1 == 5 )
	{
		move FRRB to z-axis [-2.400000] speed [500.000000];
		wait-for-move FRRB along z-axis;
		move FRRB to z-axis [0.000000] speed [3.000000];
		show Flare6;
		sleep 150;
		hide Flare6;
	}
	++gun_1;
	if( gun_1 > 5 )
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = FLMB;
	}
	if( gun_1 == 1 )
	{
		piecenum = FLLB;
	}
	if( gun_1 == 2 )
	{
		piecenum = FLRB;
	}
	if( gun_1 == 3 )
	{
		piecenum = FRMB;
	}
	if( gun_1 == 4 )
	{
		piecenum = FRLB;
	}
	if( gun_1 == 5 )
	{
		piecenum = FRRB;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn RLT to y-axis heading speed <55.000000>;
	turn RRT to y-axis heading speed <55.000000>;
	turn RLSM to x-axis <0.000000> - pitch speed <50.000000>;
	turn RLSL to x-axis <0.000000> - pitch speed <50.000000>;
	turn RLSR to x-axis <0.000000> - pitch speed <50.000000>;
	turn RRSM to x-axis <0.000000> - pitch speed <50.000000>;
	turn RRSR to x-axis <0.000000> - pitch speed <50.000000>;
	turn RRSL to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn RLT around y-axis;
	wait-for-turn RRT around y-axis;
	wait-for-turn RLSM around x-axis;
	wait-for-turn RLSL around x-axis;
	wait-for-turn RLSR around x-axis;
	wait-for-turn RRSM around x-axis;
	wait-for-turn RRSR around x-axis;	
	wait-for-turn RRSL around x-axis;	
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 6 )
	{
		move RLMB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RLMB along z-axis;
		move RLMB to z-axis [0.000000] speed [3.000000];
		show Flare7;
		sleep 150;
		hide Flare7;
	}
	if( gun_2 == 7 )
	{
		move RLLB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RLLB along z-axis;
		move RLLB to z-axis [0.000000] speed [3.000000];
		show Flare8;
		sleep 150;
		hide Flare8;
	}
	if( gun_2 == 8 )
	{
		move RLRB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RLRB along z-axis;
		move RLRB to z-axis [0.000000] speed [3.000000];
		show Flare9;
		sleep 150;
		hide Flare9;
	}
	if( gun_2 == 9 )
	{
		move RRMB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RRMB along z-axis;
		move RRMB to z-axis [0.000000] speed [3.000000];
		show Flare10;
		sleep 150;
		hide Flare10;
	}
	if( gun_2 == 10 )
	{
		move RRLB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RRLB along z-axis;
		move RRLB to z-axis [0.000000] speed [3.000000];
		show Flare11;
		sleep 150;
		hide Flare11;
	}
	if( gun_2 == 11 )
	{
		move RRRB to z-axis [-2.400000] speed [500.000000];
		wait-for-move RRRB along z-axis;
		move RRRB to z-axis [0.000000] speed [3.000000];
		show Flare12;
		sleep 150;
		hide Flare12;
	}
	++gun_2;
	if( gun_2 > 11 )
	{
		gun_2 = 6;
	}
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 6 )
	{
		piecenum = RLMB;
	}
	if( gun_2 == 7 )
	{
		piecenum = RLLB;
	}
	if( gun_2 == 8 )
	{
		piecenum = RLRB;
	}
	if( gun_2 == 9 )
	{
		piecenum = RRMB;
	}
	if( gun_2 == 10 )
	{
		piecenum = RRLB;
	}
	if( gun_2 == 11 )
	{
		piecenum = RRRB;
	}
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !gun_3 )
	{
		sleep 250;
	}
	return (1);
}

FireTertiary()
{
	hide missile;
	sleep 90000;
	show missile;
}

QueryTertiary(piecenum)
{
	piecenum = missile;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide Flare1;
	hide Flare2;
	hide Flare3;
	hide Flare4;
	hide Flare5;
	hide Flare6;
	hide Flare7;
	hide Flare8;
	hide Flare9;
	hide Flare10;
	hide Flare11;
	hide Flare12;
	hide missile;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Flare1 type BITMAPONLY | BITMAP1;
		explode Flare2 type BITMAPONLY | BITMAP2;
		explode Flare3 type BITMAPONLY | BITMAP3;
		explode Flare4 type BITMAPONLY | BITMAP4;
		explode Flare5 type BITMAPONLY | BITMAP5;
		explode Flare6 type BITMAPONLY | BITMAP1;
		explode Flare7 type BITMAPONLY | BITMAP1;
		explode Flare8 type BITMAPONLY | BITMAP2;
		explode Flare9 type BITMAPONLY | BITMAP3;
		explode Flare10 type BITMAPONLY | BITMAP4;
		explode Flare11 type BITMAPONLY | BITMAP5;
		explode Flare12 type BITMAPONLY | BITMAP1;
		explode missile type BITMAPONLY | BITMAP2;
		explode FLLB type BITMAPONLY | BITMAP2;
		explode FLMB type BITMAPONLY | BITMAP3;
		explode FLRB type BITMAPONLY | BITMAP4;
		explode FRLB type BITMAPONLY | BITMAP5;
		explode FRMB type BITMAPONLY | BITMAP1;
		explode FRRB type BITMAPONLY | BITMAP2;
		explode RLLB type BITMAPONLY | BITMAP3;
		explode RLMB type BITMAPONLY | BITMAP4;
		explode RLRB type BITMAPONLY | BITMAP5;
		explode RRLB type BITMAPONLY | BITMAP1;
		explode RRMB type BITMAPONLY | BITMAP2;
		explode RRRB type BITMAPONLY | BITMAP3;
		explode FLSL type BITMAPONLY | BITMAP4;
		explode FLSM type BITMAPONLY | BITMAP5;
		explode FLSR type BITMAPONLY | BITMAP1;
		explode FRSL type BITMAPONLY | BITMAP2;
		explode FRSM type BITMAPONLY | BITMAP3;
		explode FRSR type BITMAPONLY | BITMAP4;
		explode RLSL type BITMAPONLY | BITMAP5;
		explode RLSM type BITMAPONLY | BITMAP1;
		explode RLSR type BITMAPONLY | BITMAP2;
		explode RRSL type BITMAPONLY | BITMAP3;
		explode RRSM type BITMAPONLY | BITMAP4;
		explode RRSR type BITMAPONLY | BITMAP5;
		explode FLT type BITMAPONLY | BITMAP1;
		explode FRT type BITMAPONLY | BITMAP2;
		explode RLT type BITMAPONLY | BITMAP3;
		explode RRT type BITMAPONLY | BITMAP4;
		explode Body type BITMAPONLY | BITMAP5;
		explode Silo type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Flare1 type FALL | BITMAP1;
		explode Flare2 type FALL | BITMAP2;
		explode Flare3 type FALL | BITMAP3;
		explode Flare4 type FALL | BITMAP4;
		explode Flare5 type FALL | BITMAP5;
		explode Flare6 type FALL | BITMAP1;
		explode Flare7 type FALL | BITMAP1;
		explode Flare8 type FALL | BITMAP2;
		explode Flare9 type FALL | BITMAP3;
		explode Flare10 type FALL | BITMAP4;
		explode Flare11 type FALL | BITMAP5;
		explode Flare12 type FALL | BITMAP1;
		explode missile type FALL | BITMAP2;
		explode FLLB type FALL | BITMAP2;
		explode FLMB type FALL | BITMAP3;
		explode FLRB type FALL | BITMAP4;
		explode FRLB type FALL | BITMAP5;
		explode FRMB type FALL | BITMAP1;
		explode FRRB type FALL | BITMAP2;
		explode RLLB type FALL | BITMAP3;
		explode RLMB type FALL | BITMAP4;
		explode RLRB type FALL | BITMAP5;
		explode RRLB type FALL | BITMAP1;
		explode RRMB type FALL | BITMAP2;
		explode RRRB type FALL | BITMAP3;
		explode FLSL type FALL | BITMAP4;
		explode FLSM type FALL | BITMAP5;
		explode FLSR type FALL | BITMAP1;
		explode FRSL type FALL | BITMAP2;
		explode FRSM type FALL | BITMAP3;
		explode FRSR type FALL | BITMAP4;
		explode RLSL type FALL | BITMAP5;
		explode RLSM type FALL | BITMAP1;
		explode RLSR type FALL | BITMAP2;
		explode RRSL type FALL | BITMAP3;
		explode RRSM type FALL | BITMAP4;
		explode RRSR type FALL | BITMAP5;
		explode FLT type FALL | BITMAP1;
		explode FRT type FALL | BITMAP2;
		explode RLT type FALL | BITMAP3;
		explode RRT type FALL | BITMAP4;
		explode Body type BITMAPONLY | BITMAP5;
		explode Silo type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Flare5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Flare9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Flare10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Flare11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLLB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FLMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode FLRB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode FRLB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode FRMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode FRRB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RLLB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode RLMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode RLRB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode RRLB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode RRMB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RRRB type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode FLSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode FLSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode FLSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode FRSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode FRSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode FRSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode RLSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode RLSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode RLSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RRSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode RRSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode RRSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode FLT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode FRT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RLT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode RRT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Body type BITMAPONLY | BITMAP5;
		explode Silo type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Flare5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Flare6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Flare7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Flare8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Flare9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Flare10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Flare11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FLLB type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode FLMB type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode FLRB type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode FRLB type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode FRMB type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode FRRB type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode RLLB type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode RLMB type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode RLRB type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode RRLB type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode RRMB type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode RRRB type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode FLSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode FLSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode FLSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode FRSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode FRSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode FRSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode RLSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode RLSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode RLSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RRSL type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RRSM type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode RRSR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode FLT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode FRT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RLT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RRT type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Body type BITMAPONLY | BITMAP5;
	explode Silo type BITMAPONLY | BITMAP5;
	explode base type BITMAPONLY | BITMAP5;
}

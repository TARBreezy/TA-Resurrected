#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  GP, Base, Box, Fire, Guard1, Guard2, Guard3, Guard4,
       LFwheel, LRwheel, RFwheel, RRwheel;

static-var  bMoving, Static_Var_1, Static_Var_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn Base to z-axis Func_Var_2 speed <105.000000>;
	turn Base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	set ARMORED to 1;
	bMoving = TRUE;
	Static_Var_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	Static_Var_1 = 4;
}

StartMoving()
{
	if( !bMoving )
	{
		move Guard1 to x-axis [-3.050000] now;
		move Guard1 to y-axis [-3.350000] now;
		move Guard2 to x-axis [-3.050000] now;
		move Guard2 to y-axis [-3.350000] now;
		move Guard2 to y-axis [0.000000] speed [12.000000];
		move Guard3 to x-axis [3.050000] now;
		move Guard3 to y-axis [-3.329999] now;
		move Guard4 to x-axis [3.050000] now;
		move Guard4 to y-axis [-3.350000] now;
		move Guard4 to y-axis [0.000000] speed [12.000000];
		move LFwheel to x-axis [2.000000] now;
		move LRwheel to x-axis [2.000000] now;
		move RFwheel to x-axis [-2.000000] now;
		move RRwheel to x-axis [-2.000000] now;
		sleep 260;
		move Guard1 to y-axis [0.000000] speed [12.000000];
		move Guard2 to x-axis [0.000000] speed [11.000000];
		move Guard3 to y-axis [0.000000] speed [12.000000];
		move Guard4 to x-axis [0.000000] speed [11.000000];
		sleep 265;
		move Guard1 to x-axis [0.000000] speed [11.000000];
		move Guard3 to x-axis [0.000000] speed [11.000000];
		move LRwheel to x-axis [0.000000] speed [7.000000];
		move RRwheel to x-axis [0.000000] speed [7.000000];
		sleep 265;
		move LFwheel to x-axis [0.000000] speed [7.000000];
		move RFwheel to x-axis [0.000000] speed [7.000000];
		sleep 275;
		spin LFwheel around x-axis speed <150.000000>;
		spin RFwheel around x-axis speed <150.000000>;
		spin LRwheel around x-axis speed <150.000000>;
		spin RRwheel around x-axis speed <150.000000>;
		set ARMORED to 0;
		bMoving = TRUE;
	}
		signal SIG_MOVE;
		set-signal-mask SIG_MOVE;
		while( TRUE )
		{
			if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
			{
				emit-sfx 3 from LFwheel;
				emit-sfx 3 from RFwheel;
				emit-sfx 3 from RRwheel;
				emit-sfx 3 from LRwheel;
				emit-sfx 5 from LFwheel;
				emit-sfx 5 from RFwheel;
				emit-sfx 5 from RRwheel;
				emit-sfx 5 from LRwheel;
			}
			sleep 300;
		}
}

StopMoving()
{
	if( bMoving )
	{
		spin LFwheel around x-axis speed <0.000000>;
		spin RFwheel around x-axis speed <0.000000>;
		spin LRwheel around x-axis speed <0.000000>;
		spin RRwheel around x-axis speed <0.000000>;
		move LFwheel to x-axis [0.000000] now;
		move LFwheel to x-axis [2.000000] speed [7.000000];
		move RFwheel to x-axis [0.000000] now;
		move RFwheel to x-axis [-2.000000] speed [7.000000];
		sleep 256;
		move Guard1 to x-axis [-3.050000] speed [11.000000];
		move Guard3 to x-axis [3.050000] speed [11.000000];
		move LRwheel to x-axis [2.000000] speed [7.000000];
		move RRwheel to x-axis [-2.000000] speed [7.000000];
		sleep 266;
		move Guard1 to y-axis [-3.350000] speed [12.000000];
		move Guard2 to x-axis [-3.050000] speed [11.000000];
		move Guard3 to y-axis [-3.329999] speed [12.000000];
		move Guard4 to x-axis [3.050000] speed [11.000000];
		sleep 265;
		move Guard2 to y-axis [-3.350000] speed [12.000000];
		move Guard4 to y-axis [-3.350000] speed [12.000000];
		set ARMORED to 1;
		sleep 275;
		bMoving = FALSE;
	}
		return 0;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

RestoreAfterDelay(Func_Var_1)
{
	Static_Var_2 = 1;
	Func_Var_1 = Rand( 2000, 9000 );
	sleep Func_Var_1;
	Func_Var_1 = 15000 - Func_Var_1;
	Static_Var_2 = 0;
	sleep Func_Var_1;
	set-signal-mask 0;
	turn Box to x-axis <0.000000> speed <100.000000>;
}

AimPrimary(heading, pitch)
{
	while( Static_Var_2 )
	{
		sleep 300;
	}
	turn Box to x-axis <-90.000000> speed <100.000000>;
	sleep Rand( 900, 2000 );
	signal SIG_AIM;
	set-signal-mask 0;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

QueryPrimary(piecenum)
{
	piecenum = Fire;
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type BITMAPONLY | BITMAP2;
		explode Fire type BITMAPONLY | BITMAP3;
		explode Guard1 type BITMAPONLY | BITMAP4;
		explode Guard2 type BITMAPONLY | BITMAP5;
		explode Guard3 type BITMAPONLY | BITMAP1;
		explode Guard4 type BITMAPONLY | BITMAP2;
		explode LFwheel type BITMAPONLY | BITMAP3;
		explode LRwheel type BITMAPONLY | BITMAP4;
		explode RFwheel type BITMAPONLY | BITMAP5;
		explode RRwheel type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP2;
		explode Fire type FALL | BITMAP3;
		explode Guard1 type FALL | BITMAP4;
		explode Guard2 type FALL | BITMAP5;
		explode Guard3 type FALL | BITMAP1;
		explode Guard4 type FALL | BITMAP2;
		explode LFwheel type FALL | BITMAP3;
		explode LRwheel type FALL | BITMAP4;
		explode RFwheel type FALL | BITMAP5;
		explode RRwheel type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode Base type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP2;
		explode Fire type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode Guard1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Guard2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode Guard3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode Guard4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode LFwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode LRwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode RFwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode RRwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode Base type BITMAPONLY | BITMAP1;
	explode Box type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode Fire type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode Guard1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode Guard2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode Guard3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode Guard4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode LFwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode LRwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode RFwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode RRwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}

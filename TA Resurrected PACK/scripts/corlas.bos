#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, gun, Flare, flash;

static-var  unitviewer, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <100.000000>;
	turn base to z-axis anglez speed <100.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <10.000000>;
	turn base to x-axis <0.000000> speed <10.000000>;
}

Create()
{
	unitviewer = FALSE;
	gun_1 = base;
	hide Flare;
	hide flash;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	//hide flash;
	//sleep 6000;
	//set-signal-mask 0;
	//hide flash;
	turn turret to y-axis <0.000000> speed <180>;
	turn gun to x-axis <0.000000> speed <100>;
	//wait-for-turn turret around y-axis;
	//wait-for-turn gun around x-axis;
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = Flare;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <360>;
	turn gun to x-axis <0.000000> - pitch speed <200>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	//while( gun_1 )
	//{
	//	sleep 150;
	//}
	//show flash;
	//sleep 150;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = turret;
	//show flash;
	//show Flare;
	//sleep 150;
	//hide Flare;
	//hide flash;
	//sleep 4150;
	gun_1 = base;
}

Killed(severity, corpsetype)
{
	hide Flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP3;
		explode flash type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode gun type FALL | BITMAP3;
		explode flash type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode gun type FALL | BITMAP3;
		explode flash type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flash type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}

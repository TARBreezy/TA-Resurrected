#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, boom, neck, gun, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	while( ( !Static_Var_4 ) AND Static_Var_3 != Static_Var_5 )
	{
		Static_Var_4 = 1;
		if( Static_Var_3 AND ( !Static_Var_5 ) )
		{
			turn door1 to z-axis <0.000000> now;
			turn door1 to z-axis <-211.000000> speed <309.000000>;
			turn door2 to z-axis <0.000000> now;
			turn door2 to z-axis <210.000000> speed <308.000000>;
			sleep 683;
			turn boom to x-axis <43.000000> speed <62.000000>;
			turn neck to x-axis <-43.000000> speed <62.000000>;
			sleep 700;
			turn gun to y-axis Static_Var_2 speed <160.000000>;
			wait-for-turn gun around y-axis;
			set INBUILDSTANCE to 1;
			Static_Var_5 = 1;
		}
		if( ( !Static_Var_3 ) AND Static_Var_5 )
		{
			Static_Var_5 = 0;
			set INBUILDSTANCE to 0;
			turn gun to y-axis <0.000000> speed <160.000000>;
			turn door1 to z-axis <-211.000000> now;
			turn door2 to z-axis <210.439560> now;
			turn boom to x-axis <43.164835> now;
			turn boom to x-axis <0.000000> speed <64.000000>;
			turn neck to x-axis <-43.164835> now;
			turn neck to x-axis <0.000000> speed <64.000000>;
			sleep 672;
			wait-for-turn gun around y-axis;
			turn door1 to z-axis <0.000000> speed <306.000000>;
			turn door2 to z-axis <0.000000> speed <305.000000>;
			sleep 701;
		}
		Static_Var_4 = 0;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 100;
	return 0;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	Static_Var_3 = 1;
	start-script RequestState();
}

StopBuilding()
{
	Static_Var_3 = 0;
	sleep 5000;
	if( !Static_Var_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;
	hide wake7;
	hide wake8;
	
	corpsetype=1;
	
		if( severity <= 25 )
		{
			corpsetype=corpsetype + 2*(Static_Var_1!=2 && Static_Var_1!=1);
			explode base type BITMAPONLY | BITMAP1;
			explode beam type BITMAPONLY | BITMAP2;
			explode door1 type BITMAPONLY | BITMAP3;
			explode door2 type BITMAPONLY | BITMAP4;
			explode boom type BITMAPONLY | BITMAP5;
			explode neck type BITMAPONLY | BITMAP1;
			explode gun type BITMAPONLY | BITMAP2;
			return (0);
		}

	if( severity <= 50 )
	{
		corpsetype=corpsetype + 2*(Static_Var_1!=2 && Static_Var_1!=1);
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | BITMAP5;
		explode neck type FALL | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}

	if( severity <= 99 )
	{
		corpsetype=corpsetype + 2*(Static_Var_1!=2 && Static_Var_1!=1);
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}
	
	corpsetype=2;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}

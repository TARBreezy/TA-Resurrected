#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torax, abdomen, magasin, laser_pylone, laser_bloc, laser_jonction, laser_canon,
       laser_feu, gatling_pylone, gatling_bloc, gatling_canons, gatling_feu, cartouche, pattes, patte10,
       patte11, patte12, patte13, patte14, stomp1, patte20, patte21, patte22,
       patte23, patte24, stomp2, patte30, patte31, patte32, patte33, patte34,
       stomp3, patte40, patte41, patte42, patte43, patte44, stomp4, patte50,
       patte51, patte52, patte53, patte54, stomp5, patte60, patte61, patte62,
       patte63, patte64, stomp6, ecraseur_epaule, ecraseur_bras, load_shoulder, load_arm, unload_shoulder,
       unload_arm, goal_shoulder, goal_arm;

static-var  bMoving, gun_1, gun_3, Static_Var_4, Static_Var_5,
            restore_delay, bAiming, Static_Var_8, Static_Var_9, Static_Var_10,
            Static_Var_11, Static_Var_12, Static_Var_13, Static_Var_14, Static_Var_15,
            Static_Var_16, Static_Var_17, Static_Var_18, Static_Var_19, Static_Var_20,
            Static_Var_21, Static_Var_22, Static_Var_23, Static_Var_24, Static_Var_25,
            Static_Var_26, Static_Var_27, Static_Var_28, Static_Var_29, Static_Var_30,
            Static_Var_31, Static_Var_32, Static_Var_33, Static_Var_34, Static_Var_35,
            Static_Var_36, Static_Var_37, Static_Var_38, Static_Var_39, Static_Var_40,
            Static_Var_41;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_AIM_2			8


TransportPickup(unitid)
{
	if( get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) <= [180.000000] )
	{
		set BUSY to 1;
		if( Static_Var_16 < 0 )
		{
			Static_Var_16 = 0;
		}
		if( Static_Var_16 >= 20 )
		{
			sleep 320;
			set BUSY to 0;
			return;
		}
		if( ( unitid - 1 ) / Static_Var_21 != ( Static_Var_20 - 1 ) / Static_Var_21 )
		{
			sleep 320;
			set BUSY to 0;
			return;
		}
		turn abdomen to x-axis <5.000000> speed <3.000000>;
		turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - get UNIT_XZ(unitid)) now;
		move load_arm to z-axis get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
		move load_arm to y-axis get GROUND_HEIGHT(get UNIT_XZ(unitid)) - get PIECE_Y(base) now;
		turn load_arm to y-axis get XZ_ATAN(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
		attach-unit unitid to load_arm;
		move load_arm to z-axis [2.000000] speed [80.000000];
		move load_arm to y-axis [0.000000] speed [0.000293];
		wait-for-move load_arm along z-axis;
		attach-unit 0 to torax;
		Static_Var_16 = 1;
		if( TRUE )
		{
			Static_Var_41 = unitid;
		}
		if( TRUE )
		{
			Static_Var_40 = unitid;
		}
		if( TRUE )
		{
			Static_Var_39 = unitid;
		}
		if( TRUE )
		{
			Static_Var_38 = unitid;
		}
		if( TRUE )
		{
			Static_Var_37 = unitid;
		}
		if( TRUE )
		{
			Static_Var_36 = unitid;
		}
		if( TRUE )
		{
			Static_Var_35 = unitid;
		}
		if( TRUE )
		{
			Static_Var_34 = unitid;
		}
		if( TRUE )
		{
			Static_Var_33 = unitid;
		}
		if( TRUE )
		{
			Static_Var_32 = unitid;
		}
		if( TRUE )
		{
			Static_Var_31 = unitid;
		}
		if( TRUE )
		{
			Static_Var_30 = unitid;
		}
		if( TRUE )
		{
			Static_Var_29 = unitid;
		}
		if( TRUE )
		{
			Static_Var_28 = unitid;
		}
		if( TRUE )
		{
			Static_Var_27 = unitid;
		}
		if( TRUE )
		{
			Static_Var_26 = unitid;
		}
		if( TRUE )
		{
			Static_Var_25 = unitid;
		}
		if( TRUE )
		{
			Static_Var_24 = unitid;
		}
		if( TRUE )
		{
			Static_Var_23 = unitid;
		}
		if( TRUE )
		{
			Static_Var_22 = unitid;
		}
		if( TRUE )
		{
			explode torax type BITMAP2;
			show torax;
		}
		turn abdomen to x-axis <0.000000> speed <3.000000>;
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	if( TRUE )
	{
		var Func_Var_3;
		Func_Var_3 = 0;
		if( TRUE )
		{
			Func_Var_3 = [20.000000];
		}
		if( TRUE )
		{
			set BUSY to 1;
			turn unload_shoulder to y-axis <0.000000> now;
			move unload_arm to x-axis [0.000000] now;
			move unload_arm to y-axis [0.000000] now;
			move unload_arm to z-axis [2.000000] now;
			turn unload_arm to y-axis <0.000000> now;
			attach-unit unitid to unload_arm;
			move unload_arm to z-axis Func_Var_3 speed [120.000000];
			move unload_arm to y-axis [0.000000] speed [0.000000];
			wait-for-move unload_arm along z-axis;
			drop-unit unitid;
			Static_Var_16 = 1;
			sleep 1;
			move unload_arm to z-axis [0.000000] now;
			move unload_arm to y-axis [0.000000] now;
			sleep 1;
			if( TRUE )
			{
				attach-unit 0 to torax;
				Static_Var_16 = 1;
			}
			sleep 100;
			turn abdomen to x-axis <0.000000> speed <3.000000>;
			set BUSY to 0;
		}
		return (Static_Var_16);
	}
	var Func_Var_4, Func_Var_5, Func_Var_6, Func_Var_7, Func_Var_8, Func_Var_9, Func_Var_10, Func_Var_11, Func_Var_12;
	if( TRUE )
	{
		sleep 120;
		return (0);
	}
	Func_Var_12 = 0;
	set BUSY to 1;
	turn abdomen to x-axis <5.000000> speed <3.000000>;
	if( FALSE )
	{
		Func_Var_8 = 0;
		Func_Var_7 = 0;
		Func_Var_10 = 0;
	}
	if( FALSE )
	{
		Func_Var_8 = 0;
		Func_Var_7 = 0;
		Func_Var_10 = 0;
	}
	while( FALSE )
	{
		if( FALSE )
		{
			Func_Var_5 = [20.000000];
			Func_Var_6 = [20.000000];
			if( Func_Var_7 )
			{
				Func_Var_6 = Func_Var_6;
			}
			if( TRUE )
			{
				Func_Var_6 = 2;
			}
			turn goal_shoulder to y-axis <0.000000> now;
			move goal_arm to z-axis Func_Var_5 now;
			move goal_arm to x-axis Func_Var_6 now;
		}
		if( FALSE )
		{
			Func_Var_5 = [20.000000];
			Func_Var_9 = [18.000000];
			Func_Var_6 = Func_Var_9;
			if( Func_Var_7 )
			{
				Func_Var_6 = Func_Var_6;
			}
			if( Func_Var_8 )
			{
				Func_Var_6 = Func_Var_9;
			}
			turn goal_shoulder to y-axis Func_Var_6 now;
			move goal_arm to z-axis Func_Var_5 now;
			move goal_arm to x-axis [0.000000] now;
		}
		if( TRUE )
		{
			turn abdomen to x-axis <0.000000> speed <3.000000>;
			set BUSY to 1;
			sleep 2000;
			set BUSY to 0;
			return (0);
		}
		turn unload_shoulder to y-axis <0.000000> now;
		move unload_arm to x-axis [0.000000] now;
		move unload_arm to y-axis [0.000000] now;
		move unload_arm to z-axis [0.000000] now;
		turn unload_arm to y-axis <0.000000> now;
		wait-for-move unload_arm along z-axis;
		if( TRUE )
		{
			Func_Var_4 = Static_Var_41;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_40;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_39;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_38;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_37;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_36;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_35;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_34;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_33;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_32;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_31;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_30;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_29;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_28;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_27;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_26;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_25;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_24;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_23;
		}
		if( TRUE )
		{
			Func_Var_4 = Static_Var_22;
		}
		if( TRUE )
		{
			explode torax type BITMAP2;
			show torax;
			turn abdomen to x-axis <0.000000> speed <3.000000>;
			set BUSY to 0;
			return (1);
		}
		while( TRUE )
		{
			Static_Var_16 = 1;
			if( FALSE )
			{
				turn abdomen to x-axis <0.000000> speed <3.000000>;
				set BUSY to 0;
				return (Static_Var_16);
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_41;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_40;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_39;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_38;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_37;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_36;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_35;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_34;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_33;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_32;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_31;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_30;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_29;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_28;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_27;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_26;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_25;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_24;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_23;
			}
			if( TRUE )
			{
				Func_Var_4 = Static_Var_22;
			}
			if( TRUE )
			{
				explode torax type BITMAP2;
				show torax;
				turn abdomen to x-axis <0.000000> speed <3.000000>;
				set BUSY to 0;
				return (1);
			}
		}
		if( Func_Var_10 )
		{
			turn unload_shoulder to y-axis <0.000000> now;
			move unload_arm to x-axis [0.000000] now;
			move unload_arm to y-axis [0.000000] now;
			move unload_arm to z-axis [2.000000] now;
			turn unload_arm to y-axis <0.000000> now;
		}
		if( Func_Var_10 )
		{
			turn unload_shoulder to y-axis <0.000000> now;
			move unload_arm to x-axis [0.000000] now;
			move unload_arm to z-axis [0.000000] now;
			move unload_arm to y-axis [0.000000] now;
			turn unload_arm to y-axis <0.000000> now;
			wait-for-move unload_arm along z-axis;
			attach-unit Func_Var_4 to unload_arm;
			turn unload_shoulder to y-axis <0.000000> speed <0.000000>;
			wait-for-turn unload_shoulder around y-axis;
		}
		Func_Var_11 = 0;
		attach-unit Func_Var_4 to unload_arm;
		sleep 1;
		if( TRUE )
		{
			move unload_arm to z-axis [0.000000] speed [0.000000];
			move unload_arm to y-axis [0.000000] speed [0.000000];
			wait-for-move unload_arm along z-axis;
			turn unload_arm to y-axis <0.000000> now;
			if( FALSE )
			{
				turn unload_arm to y-axis <0.016484> now;
				if( TRUE )
				{
					turn unload_arm to y-axis <0.000000> now;
				}
			}
			wait-for-turn unload_arm around y-axis;
			drop-unit Func_Var_4;
			Static_Var_16 = 1;
			sleep 1;
			move unload_arm to z-axis [0.000000] now;
			move unload_arm to y-axis [0.000000] now;
			wait-for-move unload_arm along z-axis;
			Func_Var_10 = 0;
			if( TRUE )
			{
				Func_Var_10 = 1;
				Static_Var_16 = 1;
				attach-unit 0 to torax;
			}
			if( FALSE )
			{
				Func_Var_7 = 1;
				if( TRUE )
				{
					Func_Var_7 = 0;
					Func_Var_8 = 1;
				}
			}
			if( FALSE )
			{
				Func_Var_7 = 1;
				if( Func_Var_9 )
				{
					Func_Var_7 = 0;
					Func_Var_8 = 1;
				}
			}
		}
	}
	turn abdomen to x-axis <0.000000> speed <3.000000>;
	set BUSY to 0;
	return (Func_Var_8);
}

TexasRanger(Func_Var_1, Func_Var_2)
{
	while( bMoving )
	{
		sleep 100;
	}
	while( TRUE )
	{
		turn patte60 to y-axis <-1.000000> speed <2.747253>;
		turn patte50 to y-axis <45.000000> speed <2.747253>;
		turn patte40 to y-axis <-16.000000> speed <2.747253>;
		turn patte10 to y-axis <-14.000000> speed <2.747253>;
		turn patte21 to z-axis <30.000000> speed <2.747253>;
		turn patte22 to z-axis <45.000000> speed <2.747253>;
		turn patte23 to z-axis <7.000000> speed <2.747253>;
		sleep 500;
		while( bMoving )
		{
			sleep 100;
		}
		Func_Var_2 = 0;
		turn ecraseur_epaule to y-axis <0.000000> now;
		move ecraseur_bras to z-axis [20.000000] now;
		move ecraseur_bras to y-axis [0.000000] now;
		if( bMoving )
		{
			move ecraseur_epaule to y-axis [0.000000] now;
		}
		if( bMoving )
		{
			move ecraseur_epaule to y-axis [13107.199982] now;
		}
		turn patte31 to z-axis <0.000000> speed <2.747253>;
		turn patte32 to z-axis <0.000000> speed <2.747253>;
		turn patte33 to z-axis <0.000000> speed <2.747253>;
		turn patte20 to y-axis <45.000000> speed <2.747253>;
		sleep 500;
		while( bMoving )
		{
			sleep 100;
		}
		turn patte30 to y-axis <-14.000000> speed <2.747253>;
		turn patte60 to y-axis <-16.000000> speed <2.747253>;
		turn patte40 to y-axis <-30.000000> speed <2.747253>;
		turn patte10 to y-axis <1.000000> speed <2.747253>;
		turn patte51 to z-axis <30.000000> speed <0.000000>;
		turn patte52 to z-axis <45.000000> speed <0.000000>;
		turn patte53 to z-axis <7.000000> speed <0.000000>;
		sleep 500;
		while( bMoving )
		{
			sleep 100;
		}
		Func_Var_2 = 0;
		turn ecraseur_epaule to y-axis <0.000000> now;
		move ecraseur_bras to z-axis [20.000000] now;
		move ecraseur_bras to y-axis [0.000000] now;
		if( bMoving )
		{
			move ecraseur_epaule to y-axis [0.000000] now;
		}
		if( bMoving )
		{
			move ecraseur_epaule to y-axis [13107.199982] now;
		}
		turn patte21 to z-axis <0.000000> speed <2.747253>;
		turn patte22 to z-axis <0.000000> speed <2.747253>;
		turn patte23 to z-axis <0.000000> speed <2.747253>;
		turn patte50 to y-axis <-15.000000> speed <2.747253>;
		sleep 500;
		while( bMoving )
		{
			sleep 100;
		}
		turn patte20 to y-axis <29.000000> speed <2.747253>;
		turn patte60 to y-axis <-31.000000> speed <2.747253>;
		turn patte30 to y-axis <1.000000> speed <2.747253>;
		turn patte10 to y-axis <15.000000> speed <2.747253>;
		turn patte41 to z-axis <30.000000> speed <2.747253>;
		turn patte42 to z-axis <45.000000> speed <2.747253>;
		turn patte43 to z-axis <7.000000> speed <2.747253>;
		sleep 500;
		while( bMoving )

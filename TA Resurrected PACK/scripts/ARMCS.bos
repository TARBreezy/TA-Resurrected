#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, plate, arm, nano, door1, door2, wake1,
       wake2, turret;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 3 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RequestState()
{
	while( ( !Static_Var_3 ) AND Static_Var_2 != Static_Var_4 )
	{
		Static_Var_3 = 1;
		if( Static_Var_2 AND ( !Static_Var_4 ) )
		{
			turn door1 to z-axis <-70.659341> speed <182.126374>;
			turn door2 to z-axis <71.565934> speed <184.445055>;
			sleep 388;
			move door1 to y-axis [-3.550000] speed [9.129999];
			move door2 to y-axis [-3.550000] speed [9.129999];
			move plate to y-axis [3.700000] speed [9.509998];
			sleep 389;
			turn arm to x-axis <89.565934> speed <229.664835>;
			turn nano to x-axis <-69.758242> speed <178.879121>;
			turn turret to y-axis Static_Var_1 speed <160.000000>;
			sleep 410;
			wait-for-turn turret around y-axis;
			set INBUILDSTANCE to 1;
			Static_Var_4 = 1;
		}
		if( ( !Static_Var_2 ) AND Static_Var_4 )
		{
			Static_Var_4 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0.000000> speed <160.000000>;
			move plate to y-axis [3.700000] now;
			move plate to z-axis [0.000000] now;
			move door1 to y-axis [-3.550000] now;
			move door2 to y-axis [-3.550000] now;
			move arm to y-axis [0.000000] now;
			move nano to y-axis [0.000000] now;
			move beam to x-axis [0.000000] now;
			move beam to z-axis [0.000000] now;
			turn door1 to z-axis <-70.659341> now;
			turn door2 to z-axis <71.565934> now;
			turn arm to x-axis <89.565934> now;
			turn arm to x-axis <0.000000> speed <230.846154>;
			turn nano to x-axis <-69.758242> now;
			turn nano to x-axis <0.000000> speed <179.807692>;
			sleep 388;
			wait-for-turn turret around y-axis;
			move plate to y-axis [0.000000] speed [9.509998];
			move door1 to y-axis [0.000000] speed [9.129999];
			move door2 to y-axis [0.000000] speed [9.129999];
			sleep 389;
			turn door1 to z-axis <0.000000> speed <181.197802>;
			turn door2 to z-axis <0.000000> speed <183.505495>;
			sleep 410;
		}
		Static_Var_3 = 0;
	}
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	Static_Var_2 = 1;
	start-script RequestState();
}

StopBuilding()
{
	Static_Var_2 = 0;
	sleep 5000;
	if( !Static_Var_2 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode nano type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}

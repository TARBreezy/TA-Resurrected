#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rfirept, lfirept, pelvis, lleg, rleg, rthigh, lthigh,
       luparm, lloarm, rloarm, ruparm, rgun, lgun, ground;

static-var  Moving_1, Open_2, Gun_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		if( Moving_1 )
		{
			move pelvis to y-axis [-0.40] now;
			move rfirept to z-axis [0] now;
			move lfirept to z-axis [0] now;
			move lleg to y-axis [0] now;
			move rleg to y-axis [0] now;
			turn rthigh to x-axis <35.86> now;
			turn lthigh to x-axis <-35.15> now;
			turn lleg to x-axis <34.80> now;
			turn rleg to x-axis <26.36> now;
			sleep 110;
			move pelvis to y-axis [-0.30] now;
			move rleg to y-axis [0.40] now;
			turn rthigh to x-axis <20> now;
			turn lthigh to x-axis <-30.58> now;
			turn lleg to x-axis <29.87> now;
			turn rleg to x-axis <26.71> now;
			sleep 70;
			move pelvis to y-axis [-0.20] now;
			move rleg to y-axis [0.70] now;
			turn rthigh to x-axis <9.49> now;
			turn lthigh to x-axis <-23.90> now;
			turn lleg to x-axis <24.60> now;
			turn rleg to x-axis <26.71> now;
			sleep 60;
			move pelvis to y-axis [-0.90] now;
			turn rthigh to x-axis <-12.29> now;
			turn lthigh to x-axis <-7.37> now;
			turn lleg to x-axis <7.38> now;
			turn rleg to x-axis <26.36> now;
			sleep 50;
			move pelvis to y-axis [0] now;
			move rleg to y-axis [0.55] now;
			turn rthigh to x-axis <-21.09> now;
			turn lthigh to x-axis <4.57> now;
			turn lleg to x-axis <16.87> now;
			turn rleg to x-axis <26.36> now;
			sleep 40;
			move pelvis to y-axis [-0.10] now;
			turn rthigh to x-axis <-28.82> now;
			turn lthigh to x-axis <15.82> now;
			sleep 50;
			move pelvis to y-axis [-0.20] now;
			turn rthigh to x-axis <-43.60> now;
			turn lthigh to x-axis <18.63> now;
			sleep 60;
			move pelvis to y-axis [-0.30] now;
			turn rthigh to x-axis <-54.15> now;
			turn lthigh to x-axis <25.66> now;
			sleep 70;
			move pelvis to y-axis [-0.40] now;
			move rleg to y-axis [0] now;
			turn rthigh to x-axis <-35.86> now;
			turn lthigh to x-axis <28.13> now;
			turn lleg to x-axis <16> now;
			turn rleg to x-axis <35.86> now;
			sleep 110;
			move pelvis to y-axis [-0.30] now;
			move lleg to y-axis [0.70] now;
			turn rthigh to x-axis <-27.76> now;
			turn lthigh to x-axis <21.45> now;
			turn lleg to x-axis <21.79> now;
			turn rleg to x-axis <28.13> now;
			sleep 70;
			move pelvis to y-axis [-0.20] now;
			turn rthigh to x-axis <-21.79> now;
			turn lthigh to x-axis <8.43> now;
			turn lleg to x-axis <24.25> now;
			turn rleg to x-axis <22.14> now;
			sleep 60;
			move pelvis to y-axis [-0.10] now;
			turn rthigh to x-axis <-16> now;
			turn lthigh to x-axis <-6.67> now;
			turn rleg to x-axis <16.87> now;
			sleep 50;
			move pelvis to y-axis [0] now;
			move lleg to y-axis [0.80] now;
			turn rthigh to x-axis <-6.67> now;
			turn lthigh to x-axis <-15.46> now;
			turn lleg to x-axis <20.39> now;
			turn rleg to x-axis <25.31> now;
			sleep 40;
			move pelvis to y-axis [-0.10] now;
			turn rthigh to x-axis <2.81> now;
			turn lthigh to x-axis <-26> now;
			sleep 50;
			move pelvis to y-axis [-0.20] now;
			turn rthigh to x-axis <10.19> now;
			turn lthigh to x-axis <-35.15> now;
			sleep 60;
		move pelvis to y-axis [-0.30] now;
		turn rthigh to x-axis <21.45> now;
		turn lthigh to x-axis <-55.55> now;
		sleep 70;
			justmoved = TRUE;
		}
		if( !Moving_1 )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0] speed [5];
				turn rthigh to x-axis <0> speed <200>;
				turn rleg to x-axis <0> speed <200>;
				turn lthigh to x-axis <0> speed <200>;
				turn lleg to x-axis <0> speed <200>;
//				if( !Open_2 )
//				{
//					turn torso to y-axis <0> speed <90>;
//				}
				justmoved = FALSE;
			}
			sleep 50;
		}
	}
	return (0);
}

Create()
{
	hide rfirept;
	hide lfirept;
	Moving_1 = 0;
	Open_2 = 0;
	Gun_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	Moving_1 = 1;
	return (0);
}

StopMoving()
{
	Moving_1 = 0;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn torso to y-axis <0> speed <90>;
			Open_2 = 0;
//			turn luparm to z-axis <-73.48> now;
			turn luparm to z-axis <0> speed <67>;
//			turn lloarm to z-axis <90> now;
			turn lloarm to z-axis <0> speed <82>;
//			turn rloarm to z-axis <-90> now;
			turn rloarm to z-axis <0> speed <82>;
//			turn ruparm to z-axis <75.59> now;
			turn ruparm to z-axis <0> speed <69>;
//			sleep 500;
	return (0);
}

AimPrimary(heading, pitch)
{
	if( !Open_2 )
	{
//			turn luparm to z-axis <0> now;
			turn luparm to z-axis <-73> speed <212>;
//			turn lloarm to z-axis <0> now;
			turn lloarm to z-axis <90> speed <260>;
//			turn rloarm to z-axis <0> now;
			turn rloarm to z-axis <-90> speed <260>;
//			turn ruparm to z-axis <0> now;
			turn ruparm to z-axis <75> speed <218>;
			sleep 400;
			Open_2 = 1;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn torso to y-axis heading speed <275>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !Gun_3 )
	{
		piecenum = rfirept;
	}
	if( Gun_3 )
	{
		piecenum = lfirept;
	}
	return (0);
}

FirePrimary()
{
	if( !Gun_3 )
	{
		Gun_3 = 1;
		move rgun to z-axis [-1.50] speed [25];
		wait-for-move rgun along z-axis;
		move rgun to z-axis [0] speed [3];
		return (0);
	}
		Gun_3 = 0;
		move lgun to z-axis [-1.50] speed [25];
		wait-for-move lgun along z-axis;
		move lgun to z-axis [0] speed [3];
	return (0);
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP3;
		explode rleg type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode lloarm type BITMAPONLY | BITMAP3;
		explode rloarm type BITMAPONLY | BITMAP4;
		explode ruparm type BITMAPONLY | BITMAP5;
		explode rgun type BITMAPONLY | BITMAP1;
		explode lgun type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type SHATTER | BITMAP1;
		explode pelvis type FALL | BITMAP2;
		explode lleg type FALL | BITMAP3;
		explode rleg type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode lloarm type FALL | BITMAP3;
		explode rloarm type FALL | BITMAP4;
		explode ruparm type FALL | BITMAP5;
		explode rgun type FALL | BITMAP1;
		explode lgun type FALL | BITMAP2;
		explode ground type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode torso type SHATTER | BITMAP1;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}